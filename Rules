#!/usr/bin/env ruby

# Rules - routing and compiling rules
# Copyright (c) 2012-2014, Matteo Panella <morpheus@level28.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


preprocess do
  # Merge config.yaml with deployment-dependent config
  load_local_configuration ENV[ENV_NAME]
  load_navigation_data

  # Unpublish items if necessary
  items.delete_if { |item| item[:publish] == false }

  # Update timestamps
  update_articles_timestamps

  render_archives
  render_tag_indexes

  items.select { |i| not i.binary? }.each do |item|
    item[:layout] = "none" unless item[:layout] || File.extname(route_path(item)) == '.html'
  end
end

compile '/assets/*' do
  # Don't filter assets
end

compile '/icons/*' do
  # Don't filter icons
end

compile '/stuff/*' do
  # Don't filter miscellaneous stuff
end

compile '/robots/' do
  # Don't filter robots.txt
end

compile '/keybase/' do
  # Never *EVER* touch the keybase proof
end

compile '/sitemap/' do
  filter :haml
end

compile '/js/*/' do
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last

  # Check if we have to filter this item through erb
  if ext == 'erb'
    filter :erb
  end

  # Uglify everything, but DON'T mangle variable names, since it would break DISQUS
  filter :uglify_js, :mangle => false
end

compile '*' do
  if item.binary?
    # donâ€™t filter binary items
  else
    ext = item[:extension].nil? ? nil : item[:extension].split('.').last

    # Determine which filter we should use for this item
    if ext == 'erb'
      filter :erb
    elsif ext == 'haml' || ext.nil?
      filter :haml
    elsif ext == 'md' || ext == 'markdown'
      filter :redcarpet, :options => {:fenced_code_blocks => true}, :renderer => PygmentsRenderer
      filter :colorize_syntax, :default_colorizer => :pygmentsrb
    else
      raise "No filter for #{item.identifier}"
    end

    layout 'default' unless item[:layout] == "none"
  end
end

route '/assets/*/' do
  route_assets(item)
end

route '/icons/*/' do
  item[:content_filename].gsub(/^content\/icons/, '')
end

route '/img/*/' do
  route_generic(item)
end

route '/images/*/' do
  route_generic(item)
end

route '/stuff/*/' do
  route_generic(item)
end

route '/robots/' do
  route_generic(item)
end

route '/keybase/' do
  route_generic(item)
end

route '/sitemap/' do
  item.identifier.chop + '.xml'
end

route '/wp-admin/' do
  item[:content_filename].gsub(/^content/, '').gsub(/\.md$/, '.html')
end

route '/cookie-policy/' do
  route_generic(item).gsub(/.md$/, '.html')
end

route '*' do
  route_path(item)
end

layout '*', :haml
